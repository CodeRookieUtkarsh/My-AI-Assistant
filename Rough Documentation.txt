
# All the imported libraries at a glance
import pyttsx3
import wikipedia as wiki
import wolframalpha as wolf
import kivy

from kivy.app import App
from kivy.uix.gridlayout import GridLayout
from kivy.uix.textinput import TextInput
from kivy.core.window import Window
from kivy.uix.popup import Popup
from kivy.uix.label import Label
------------------------------------------------------------------------------------------------------------------------
Defining basic terms:
user_input = input('How may I Help you? ')
req_be_specific = f"""{user_input.capitalize()} has many contexts,
		Be specific by putting the context in '()' after writing your query"""
wiki_interruption = "I am sorry to interrupt but you have to be more specific."
------------------------------------------------------------------------------------------------------------------------
Basic TTS running:

import pyttsx3
engine = pyttsx3.init()
engine.say()    # Say whatever you want
engine.setProperty('rate',120)
engine.setProperty('volume', 0.9)
------------------------------------------------------------------------------------------------------------------------
Kivy for UDA:

import kivy

from kivy.app import App
from kivy.uix.gridlayout import GridLayout
from kivy.uix.label import Label
from kivy.uix.textinput import TextInput
from kivy.core.window import Window
from kivy.uix.popup import Popup

class UDAScreen(GridLayout):
	def __init__(self, **kwargs):
		super(UDAScreen, self).__init__(**kwargs)
		self.cols = 1
		self.popup = Popup(title="Utkarsh's Digital Assistant")
		self.add_widget(Label(text="Welcome to Utkarsh's Digital Assistant
               How can I help you?"))
		self.intro = TextInput(multiline=True)
		self.add_widget(self.intro)
		Window.size = (600, 400)
		Window.top = 200
		Window.left = 500


# Whatever is entered in 'def ___App(App):' in place of '___' will appear as the title of the window
class UDAApp(App):
	def build(self):
		UDAScreen()


if __name__ == '__main__':
    UDAApp().run()

------------------------------------------------------------------------------------------------------------------------
WolframAlpha basics:

# Defining a function to carry out the the process of WolframAlpha
def wolf_process():
	import wolframalpha as wolf

	wolf_client = wolf.Client('Y463RG-8T5THE5EH4')

	wolf_res = wolf_client.query(user_input)

	engine.say(next(wolf_res.results).text)
	print(next(wolf_res.results).text)
------------------------------------------------------------------------------------------------------------------------
Wikipedia Basics:

def wiki_process():
	# Importing wikipedia to call Wikipedia queries for our UDA
	import wikipedia as wiki

	wiki_client = wiki
	wiki_res = wiki_client.summary(user_input, sentences=4)
	try:
		engine.say(wiki_res)
		print(wiki_res)
	except wiki.DisambiguationError as e:
		# This exception occurs when multiple contexts are available for the requested query
		engine.say(wiki_interruption)
		print(wiki_interruption)
		engine.say(req_be_specific)
		print(req_be_specific)
		engine.say(e.options)
		print(e.options)

------------------------------------------------------------------------------------------------------------------------
------------------------------------------------------------------------------------------------------------------------
------------------------------------------------------------------------------------------------------------------------
Speech Recognition:

#import library
import speech_recognition as sr

# Initialize recognizer class (for recognizing the speech)
r = sr.Recognizer()

# Reading Audio file as source
# listening the audio file and store in audio_text variable

with sr.AudioFile('{}.wav') as source:     # In {}, put the .wav file you want to get recognized
    
    audio_text = r.listen(source)
    
# recognize_() method will throw a request error if the API is unreachable, hence using exception handling
    try:
        
        # using google speech recognition
        text = r.recognize_google(audio_text)
        print('Converting audio transcripts into text ...')
        print(text)
     
    except:
         print('Sorry.. run again...')
